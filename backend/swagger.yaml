openapi: 3.0.0
info:
  title: Blood Donation Management System API
  version: 1.0.0
  description: API documentation for the Blood Donation Management System

servers:
  - url: http://localhost:3000/api
    description: Development server
  - url: https://api.blooddonation.com/api
    description: Production server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        name:
          type: string
        role:
          type: string
          enum: [admin, staff, donor]
        phoneNumber:
          type: string
        address:
          type: string
        city:
          type: string
        district:
          type: string
        bloodType:
          type: string
        lastDonation:
          type: string
          format: date-time
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    BloodRequest:
      type: object
      properties:
        id:
          type: string
          format: uuid
        bloodType:
          type: string
        units:
          type: integer
          minimum: 1
        urgency:
          type: string
          enum: [low, medium, high]
        status:
          type: string
          enum: [pending, fulfilled, cancelled]
        hospital:
          type: string
        reason:
          type: string
        requiredBy:
          type: string
          format: date-time
        requestedBy:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    SystemLog:
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
        message:
          type: string
        userId:
          type: string
          format: uuid
          nullable: true
        metadata:
          type: object
        timestamp:
          type: string
          format: date-time

    ApiResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
        error:
          type: string
          nullable: true
        message:
          type: string
          nullable: true

    PaginatedResponse:
      type: object
      properties:
        items:
          type: array
          items:
            type: object
        total:
          type: integer
        page:
          type: integer
        limit:
          type: integer

paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - name
                - role
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
                name:
                  type: string
                role:
                  type: string
                  enum: [admin, staff, donor]
                phoneNumber:
                  type: string
                address:
                  type: string
                city:
                  type: string
                district:
                  type: string
                bloodType:
                  type: string
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Invalid input
        '409':
          description: Email already exists

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Invalid credentials

  /auth/profile:
    get:
      tags:
        - Authentication
      summary: Get user profile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized

  /admin/users:
    get:
      tags:
        - Admin
      summary: Get all users (admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
          description: Page number
        - in: query
          name: role
          schema:
            type: string
            enum: [admin, staff, donor]
          description: Filter by role
        - in: query
          name: search
          schema:
            type: string
          description: Search term
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden

    post:
      tags:
        - Admin
      summary: Create new user (admin only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden

  /admin/users/{id}:
    put:
      tags:
        - Admin
      summary: Update user (admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: User not found

    delete:
      tags:
        - Admin
      summary: Delete user (admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: User not found

  /admin/logs:
    get:
      tags:
        - Admin
      summary: Get system logs (admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
          description: Page number
        - in: query
          name: type
          schema:
            type: string
          description: Filter by log type
      responses:
        '200':
          description: List of system logs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden

  /blood-requests:
    get:
      tags:
        - Blood Requests
      summary: Get blood requests
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum: [pending, fulfilled, cancelled]
          description: Filter by status
        - in: query
          name: bloodType
          schema:
            type: string
          description: Filter by blood type
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
          description: Page number
      responses:
        '200':
          description: List of blood requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized

    post:
      tags:
        - Blood Requests
      summary: Create blood request
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - bloodType
                - units
                - urgency
                - hospital
                - reason
                - requiredBy
              properties:
                bloodType:
                  type: string
                units:
                  type: integer
                  minimum: 1
                urgency:
                  type: string
                  enum: [low, medium, high]
                hospital:
                  type: string
                reason:
                  type: string
                requiredBy:
                  type: string
                  format: date-time
      responses:
        '201':
          description: Blood request created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
        '400':
          description: Invalid input

  /blood-requests/{id}:
    get:
      tags:
        - Blood Requests
      summary: Get blood request by ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Blood request details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
        '404':
          description: Request not found

    put:
      tags:
        - Blood Requests
      summary: Update blood request
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BloodRequest'
      responses:
        '200':
          description: Blood request updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Request not found

    delete:
      tags:
        - Blood Requests
      summary: Delete blood request
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Blood request deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Request not found 